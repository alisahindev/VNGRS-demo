{"kind":"FETCH","data":{"headers":{"access-control-allow-origin":"*","access-control-expose-headers":"ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO, X-GitHub-Request-Id, Deprecation, Sunset","cache-control":"private, max-age=60, s-maxage=60","content-encoding":"gzip","content-security-policy":"default-src 'none'","content-type":"application/json; charset=utf-8","date":"Fri, 20 Oct 2023 00:55:00 GMT","etag":"W/\"50d0f89222e7eedcb946d3c67f4fe0a072002637e1e451f7e147ef565518d82e\"","github-authentication-token-expiration":"2023-10-26 23:39:30 +0300","referrer-policy":"origin-when-cross-origin, strict-origin-when-cross-origin","server":"GitHub.com","strict-transport-security":"max-age=31536000; includeSubdomains; preload","transfer-encoding":"chunked","vary":"Accept, Authorization, Cookie, X-GitHub-OTP, Accept-Encoding, Accept, X-Requested-With","x-accepted-github-permissions":"issues=read","x-content-type-options":"nosniff","x-frame-options":"deny","x-github-api-version-selected":"2022-11-28","x-github-media-type":"github.v3; format=json","x-github-request-id":"AD3E:BA7C:2FD39CA:304591D:6531CFE3","x-ratelimit-limit":"5000","x-ratelimit-remaining":"4969","x-ratelimit-reset":"1697764607","x-ratelimit-resource":"core","x-ratelimit-used":"31","x-xss-protection":"0"},"body":"","status":200,"url":"https://api.github.com/repos/facebook/react/issues?page=1&per_page=25&sort=created&state=closed&labels=Component%3A%20Optimizing%20Compiler&direction=desc"},"revalidate":31536000,"tags":[]}